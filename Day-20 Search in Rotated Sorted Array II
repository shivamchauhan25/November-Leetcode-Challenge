Search in Rotated Sorted Array II

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?


SOlution:
C++:

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int size = nums.size();
        int start(0), end(size - 1);
        while(start <= end)
        {
            while(start+1 <= end and nums[start] == nums[start+1])
                start++;
            while(end-1 >= 0 and nums[end] == nums[end-1])
                end--;
            int mid = start + ((end - start) >> 1);
            if(nums[mid] == target)
                return true;
            else if(nums[mid] <= nums[end])
            {
                if(nums[mid] < target and target <= nums[end])
                    start = mid + 1;
                else
                    end = mid - 1;
            }
            else if(nums[mid] >= nums[start])
            {
                if(nums[mid] > target and target >= nums[start])
                    end = mid - 1;
                else
                    start = mid + 1;
            }
        }
        return false;
    }
};
