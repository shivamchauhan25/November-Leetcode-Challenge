Add Two Numbers II

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

Solution:
Python:

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:

        def revlist(l):
            prev = None
            while l:
                l.next, prev, l = prev, l, l.next
            return prev

        rl1 = revlist(l1)
        rl2 = revlist(l2)
        res = 0
        head = prev = ListNode()

        while rl1 or rl2 or res:
            if rl1: 
                res += rl1.val
                rl1 = rl1.next
            if rl2: 
                res += rl2.val
                rl2 = rl2.next

            prev.next = ListNode(res % 10)
            prev = prev.next
            res //= 10

        return revlist(head.next)
